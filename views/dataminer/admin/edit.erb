<h1 class="mv1">Report: <%= @page.report.caption %></h2>

<section class="crossbeams_layout-border pa2">
<form action='/dataminer/admin/<%= @page.id%>/save/' method=post class="crossbeams-form">
  <%= csrf_tag %>
  <div class="crossbeams-row">
    <div class="crossbeams-col">
      <div class="crossbeams-field">
        <label for="filename">File name</label>
        <input type='text' id="filename" name='filename' class='cbl-input' placeholder='filename.yml' value='<%= @page.filename %>' required readonly="readonly" />
      </div>
      <div class="crossbeams-field">
        <label for="caption">Caption</label>
        <input type='text' id="caption" name='caption' class='cbl-input' placeholder='Caption' value='<%= @page.report.caption %>' required size="80"/>
      </div>
      <div class="crossbeams-field">
        <label for="limit">Limit</label>
        <input type='number' id="limit" name='limit' class='cbl-input' placeholder='Limit' value='<%= @page.report.limit %>' size="80"/>
      </div>
      <div class="crossbeams-field">
        <label for="offset">Offset</label>
        <input type='number' id="offset" name='offset' class='cbl-input' placeholder='Offset' value='<%= @page.report.offset %>' size="80"/>
      </div>
      <div class="crossbeams-field">
        <label for="render_url">Render URL</label>
        <input type='url' id="render_url" name='render_url' class='cbl-input' placeholder='Render URL' value='<%= @page.report.external_settings[:render_url] %>'/>
      </div>
      <div class="crossbeams-actions">
        <input type="submit" class="dim br2 pa3 bn white bg-green" value="Update report header" />
      </div>
    </div>
  </div>

</form>
</section>
<section class="crossbeams_layout-border pa2">
  <a href="#" onclick="crossbeamsUtils.toggleVisibility('sql_code');return false" class="crossbeams-button f6 link dim br2 ph3 pv2 dib white bg-silver"><%= Crossbeams::Layout::Icon.render(:info) %> Toggle SQL view</a>
  <a href='/dataminer/admin/<%= @page.id %>/change_sql/' class="crossbeams-button f6 link dim br2 ph3 pv2 dib white bg-silver"><%= Crossbeams::Layout::Icon.render(:edit) %> Change SQL</a>
  <a href='/dataminer/admin/<%= @page.id %>/reorder_columns/' class="crossbeams-button f6 link dim br2 ph3 pv2 dib white bg-silver"><%= Crossbeams::Layout::Icon.render(:sort) %> Re-order columns</a>
  <pre id="sql_code" hidden><%= sql_to_highlight(@page.report.runnable_sql) %></pre>
</section>

<div style="height:20em">
  <%= Crossbeams::Layout::Renderer::Grid.header('grd1', 'Columns') %>
  <div id="grd1" style="height: 100%;" class="ag-theme-balham"></div>
</div>

<p style="margin-top:5em;">
  <a href='/dataminer/admin/<%= @page.id %>/parameter/new/' class="crossbeams-button link dim br2 pa3 white bg-blue"><%= Crossbeams::Layout::Icon.render(:plus) %> Add a parameter</a>
</p>
<div style="height:20em">
  <%= Crossbeams::Layout::Renderer::Grid.header('grd2', 'Parameters') %>
  <div id="grd2" style="height: 100%;" class="ag-theme-balham"></div>
</div>
<p style="height:2em">
</p>

<% content_for :late_javascript do %>
  <script>
    (function() {
      const translateColDefs = function translateColDefs(columnDefs) {
        const newColDefs = [];
        let newCol = {};
        columnDefs.forEach((col) => {
          newCol = {};
          Object.keys(col).forEach((attr) => {
            if (attr === 'cellRenderer') {
              newCol[attr] = col[attr]; // Default behaviour is to copy it over.
              if (col[attr] === 'crossbeamsGridFormatters.testRender') {
                newCol[attr] = crossbeamsGridFormatters.testRender;
              }
              if (col[attr] === 'crossbeamsGridFormatters.menuActionsRenderer') {
                newCol[attr] = crossbeamsGridFormatters.menuActionsRenderer;
              }
              if (col[attr] === 'crossbeamsGridFormatters.numberWithCommas2') {
                newCol[attr] = crossbeamsGridFormatters.numberWithCommas2;
              }
              if (col[attr] === 'crossbeamsGridFormatters.numberWithCommas4') {
                newCol[attr] = crossbeamsGridFormatters.numberWithCommas4;
              }
              if (col[attr] === 'crossbeamsGridFormatters.booleanFormatter') {
                newCol[attr] = crossbeamsGridFormatters.booleanFormatter;
              }
              if (col[attr] === 'crossbeamsGridFormatters.hrefInlineFormatter') {
                newCol[attr] = crossbeamsGridFormatters.hrefInlineFormatter;
              }
              if (col[attr] === 'crossbeamsGridFormatters.hrefSimpleFormatter') {
                newCol[attr] = crossbeamsGridFormatters.hrefSimpleFormatter;
              }
              if (col[attr] === 'crossbeamsGridFormatters.hrefSimpleFetchFormatter') {
                newCol[attr] = crossbeamsGridFormatters.hrefSimpleFetchFormatter;
              }
              if (col[attr] === 'crossbeamsGridFormatters.hrefPromptFormatter') {
                newCol[attr] = crossbeamsGridFormatters.hrefPromptFormatter;
              }
            } else if (attr === 'valueFormatter') {
              if (col[attr] === 'crossbeamsGridFormatters.numberWithCommas2') {
                newCol[attr] = crossbeamsGridFormatters.numberWithCommas2;
              }
              if (col[attr] === 'crossbeamsGridFormatters.numberWithCommas4') {
                newCol[attr] = crossbeamsGridFormatters.numberWithCommas4;
              }
            } else {
              newCol[attr] = col[attr];
            }
          });
          newColDefs.push(newCol);
        });
        return newColDefs;
      };

      let colDefs = translateColDefs(<%= @page.col_defs.to_json %>);
      let rowDefs = <%= @page.row_defs.to_json %>;
      let grid = document.querySelector('#grd1');
      let grid_id = grid.getAttribute('id');
      const sideBar = {
        toolPanels: [
          {
            id: 'columns',
            labelDefault: 'Columns',
            labelKey: 'columns',
            iconKey: 'columns',
            toolPanel: 'agColumnsToolPanel',
          },
          {
            id: 'filters',
            labelDefault: 'Filters',
            labelKey: 'filters',
            iconKey: 'filter',
            toolPanel: 'agFiltersToolPanel',
          },
        ],
      };

      let gridOptions = {
        columnDefs: colDefs,
        rowData: rowDefs,
        context: {
          saveUrl: '<%= @page.save_url %>',
          keyColumn: 'name',
          domGridId: 'grd1'
        },
        enableColResize: true,
        enableSorting: true,
        enableFilter: true,
        rowSelection: 'single',
        enableRangeSelection: true,
        statusBar: {
          statusPanels: [
            // { statusPanel: 'agTotalRowCountComponent', align: 'left' },
            // { statusPanel: 'agFilteredRowCountComponent' }, - these two include group rows.
            // { statusPanel: 'agSelectedRowCountComponent' },
            { statusPanel: 'agAggregationComponent' },
          ],
        },
        sideBar,
        suppressAggFuncInHeader: true,
        onCellValueChanged: function(event) {
          if(event.oldValue === event.newValue) {
            console.log('NOCHANGE!');
          }
          else {
            console.log('Old value: ', event.oldValue, 'New value: ', event.newValue);
            var http     = new XMLHttpRequest();
            var url      = event.context.saveUrl;
            var formData = new FormData();
            formData.append('key_name', event.context.keyColumn);
            formData.append('key_val', event.data[event.context.keyColumn]);
            formData.append('col_name', event.colDef.field);
            formData.append('col_val', event.newValue);
            formData.append('_csrf', document.querySelector('meta[name="_csrf"]').content);

            http.responseType = 'json'
            http.open("POST", url, true);

            http.onreadystatechange = function() {//Call a function when the state changes.
              if(http.readyState == 4 && http.status == 200) {
                var resp = http.response;
                switch(resp.status) {
                  case 'ok':
                    console.log(resp.message);
                    if(resp.changedFields !== undefined) {
                      console.log('got changes: ', resp.changedFields);
                      for(cattr in resp.changedFields) {
                        event.node.setDataValue(cattr, resp.changedFields.cattr); // This also kicks off edit change...
                      }
                      Jackbox.information('Other columns were changed as a result of this change.');
                    }
                    // TODO apply extra column changes if any...
                    break;
                  case 'info':
                    console.log('info: ', resp.message);
                    Jackbox.information(resp.message);
                    break;
                  case 'warn':
                    // TODO: Can we change this so the edit call doesn't happen again...
                    event.node.setDataValue(event.colDef.field, event.oldValue);
                    console.log('warning: ', resp.message);
                    Jackbox.warning(resp.message);
                    break;
                  case 'error':
                    // TODO: Can we change this so the edit call doesn't happen again...
                    event.node.setDataValue(event.colDef.field, event.oldValue);
                    console.log('error: ', resp.message);
                    Jackbox.error(resp.message);
                    break;
                  case 'success':
                    console.log('success: ', resp.message);
                    Jackbox.success(resp.message);
                }
              }
            }
            http.send(formData);
          }
        },
      };

      new agGrid.Grid(grid, gridOptions);
      crossbeamsGridStore.addGrid(grid_id, gridOptions);

      colDefs = translateColDefs(<%= @page.col_defs_params.to_json %>);
      rowDefs = <%= @page.row_defs_params.to_json %>;
      grid = document.querySelector('#grd2');
      grid_id = grid.getAttribute('id');

      gridOptions = {
        columnDefs: colDefs,
        rowData: rowDefs,
        enableColResize: true,
        enableSorting: true,
        enableFilter: true,
        enableRangeSelection: true,
        suppressAggFuncInHeader: true,
      };

      new agGrid.Grid(grid, gridOptions);
      crossbeamsGridStore.addGrid(grid_id, gridOptions);

    }).call(this);
  </script>
<% end %>
